#ifdef _WIN32
#include <windows.h>
#define _USE_MATH_DEFINES
#endif
#define PI 3.14159265f // PI tá tudo em maiúsculo porque constantes se escrevem tudo em maiúsculo
#include <math.h>

#include <GL/gl.h> // funcoes principais
#include <GL/glu.h> // funcoes auxiliares, mas tb facilita em alguns detalhes
#include <GL/glut.h> /* biblioteca de gerenciamento de janelas, input...*/

#include <stdio.h>
#include <time.h>

float f(float x)
{
	return sin(x*PI);
}

/*
void drawCircle(float r) //radius ou raio
{
	glBegin(GL_POLYGON);
	for (float ang = 0; ang <= 2 * PI; ang += 0.01f)
	{
		float x = r*sin(ang);
		float y = r*cos(ang);
		glVertex2f(x, y);
	}
	glEnd();
}
*/

void drawCircunference(float r) //radius ou raio
{
	glBegin(GL_LINE_STRIP);
	static float t = 0;
	t += 0.01;
	for (float x = -1; x <= 1; x += 0.01f)
	{
		float y = f(x + t);
		glColor3f((y+1)/2.0f, f(t), 0);
		glVertex2f(x, y);
	}
	glEnd();
}



void display()
{
	static float t = 0;
	t += 0.01;


	//define a cor do fundo
	glClearColor(f(0.35*f(t)), t * f(f(0.35/t)), f(f(t)), 1); // R, G, B, A de 0 a 1, A (alpha) nao e utilizado

									   //limpa a tela com a cor definida no glClearColor
	glClear(GL_COLOR_BUFFER_BIT);

	//define a cor usada por todos os vertices definidos apos

	glBegin(GL_LINES);
	glColor3f(1, t, 0);
	glVertex2f(0, 1);
	glColor3f(0, 1, t);
	glVertex2f(0, -1);

	glVertex2f(-1, 0);
	glVertex2f(1, 0);
	
	glEnd();

	drawCircunference(1);

	
	glutSwapBuffers();

	glutPostRedisplay();



}


void reshape(int w, int h)
{
	// redimensiona a tela
	glViewport(0, 0, w, h);
}



int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(600, 600); //tamanho da janela

	glutCreateWindow("Aula 1"); // cria uma janela com o titulo escolhido
	glutReshapeFunc(reshape); // funcao que sera chamada para redimensionada a janela
	glutDisplayFunc(display); // funcao que sera chamada para desenhar

	glutMainLoop(); //loop de eventos do freeglut
	return 0;
}
